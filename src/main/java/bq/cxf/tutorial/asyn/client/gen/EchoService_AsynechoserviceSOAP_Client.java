
package bq.cxf.tutorial.asyn.client.gen;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.7.8
 * 2014-02-24T14:47:37.861-05:00
 * Generated source version: 2.7.8
 * 
 */
public final class EchoService_AsynechoserviceSOAP_Client {

    private static final QName SERVICE_NAME = new QName("http://bq.cxf.tutorial/asynechoservice/", "asynechoservice");

    private EchoService_AsynechoserviceSOAP_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = Asynechoservice.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        Asynechoservice ss = new Asynechoservice(wsdlURL, SERVICE_NAME);
        EchoService port = ss.getAsynechoserviceSOAP();  
        
        // invoke 1
        {
        System.out.println("Invoking echoAsync...");
        java.lang.String _echoAsync_arg0 = "hello, world!";
        Response<bq.cxf.tutorial.asyn.client.gen.EchoResponse> _echoAsync__return = port.echoAsync(_echoAsync_arg0);
        System.out.println("echoAsync.result=" + _echoAsync__return);
        }
        
        {
        System.out.println("Invoking echoAsync...");
        java.lang.String _echoAsync_arg0 = "hello, world";
        
        // invoke 2: 
        AsyncHandler<bq.cxf.tutorial.asyn.client.gen.EchoResponse> _echoAsync_asyncHandler = new AsyncHandler<EchoResponse>() {

			@Override
			public void handleResponse(Response<EchoResponse> res) {
				if(res.isDone()){
					try {
						System.out.println("### asyn echo result : " + res.get().getReturn());
					} catch (InterruptedException e) {
						e.printStackTrace();
					} catch (ExecutionException e) {
						e.printStackTrace();
					}
					
				}
			}
		};
		
        Future<?> _echoAsync__return = port.echoAsync(_echoAsync_arg0, _echoAsync_asyncHandler);
        System.out.println("echoAsync.result=" + _echoAsync__return);

        System.out.println("### do somthing");
        System.out.println("### get result : " + _echoAsync__return.get());

        // syn invoke
        {
        System.out.println("Invoking echo...");
        java.lang.String _echo_arg0 = "hello, world again!";
        java.lang.String _echo__return = port.echo(_echo_arg0);
        System.out.println("echo.result=" + _echo__return);
        }
        
        }
        System.exit(0);
    }

}
